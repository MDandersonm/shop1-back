
server:
  port: 8888

spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  datasource:
    url: jdbc:mysql://localhost:3306/db_shop1?allowpublickeyretrieval=true&usessl=false&serverTimezone=UTC
    username: eddi
    password: eddi@123
    driver-class-name: com.mysql.cj.jdbc.Driver
    dialect: org.hibernate.dialect.MySQL8Dialect

  jpa:
    open-in-view: false
    database: mysql
    show-sql: true
    generate-ddl: true
    hibernate:
      ddl-auto: update

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile

          facebook:
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
            scope:
              - email
              - public_profile
          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              - profile_image
            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver # 구글이나페이스북은 자동으로 설정되어있음

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize # 네이버 로그인창 뜨기
            token-uri: https://nid.naver.com/oauth2.0/token # 토큰 받기
            user-info-uri: https://openapi.naver.com/v1/nid/me # 프로필정보받기
            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.


  servlet:
    multipart:
      maxFileSize: 10MB
      maxRequestSize: 10MB
  cache:
    type: redis

#  redis:
#    host: 127.0.0.1
#    port: 6379


logging:
  level:
    org.springframework: DEBUG
    com.example.shop1back: DEBUG